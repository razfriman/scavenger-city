// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ScavengerCity.Entities;
using ScavengerCity.Models;
using System;

namespace ScavengerCity.Migrations
{
    [DbContext(typeof(ScavengerDbContext))]
    [Migration("20171213025807_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ScavengerCity.Entities.AnswerEntity", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("AnswerID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ScavengerCity.Entities.AnswerInstanceEntity", b =>
                {
                    b.Property<int>("AnswerInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCorrect");

                    b.Property<bool>("IsSkipped");

                    b.Property<int>("QuestionInstanceID");

                    b.Property<string>("Text");

                    b.HasKey("AnswerInstanceID");

                    b.HasIndex("QuestionInstanceID");

                    b.ToTable("AnswerInstances");
                });

            modelBuilder.Entity("ScavengerCity.Entities.HintEntity", b =>
                {
                    b.Property<int>("HintID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("HintID");

                    b.ToTable("Hints");
                });

            modelBuilder.Entity("ScavengerCity.Entities.HuntEntity", b =>
                {
                    b.Property<int>("HuntID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<float>("Distance");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("HuntID");

                    b.ToTable("Hunts");
                });

            modelBuilder.Entity("ScavengerCity.Entities.HuntInstanceEntity", b =>
                {
                    b.Property<int>("HuntInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AdjustedEndTime");

                    b.Property<int?>("CurrentQuestionInstanceID");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("HuntID");

                    b.Property<int>("Penalties");

                    b.Property<int>("Progress");

                    b.Property<int>("PurchaseID");

                    b.Property<int>("QuestionCount");

                    b.Property<int>("Skipped");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("Status");

                    b.Property<string>("UserID")
                        .IsRequired();

                    b.HasKey("HuntInstanceID");

                    b.HasIndex("CurrentQuestionInstanceID");

                    b.HasIndex("HuntID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("HuntInstances");
                });

            modelBuilder.Entity("ScavengerCity.Entities.PurchaseEntity", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("Price");

                    b.HasKey("PurchaseID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ScavengerCity.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerID");

                    b.Property<string>("Fact")
                        .IsRequired();

                    b.Property<int>("HintID");

                    b.Property<int>("HuntID");

                    b.Property<int>("SequenceNumber");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("QuestionID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("HintID");

                    b.HasIndex("HuntID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ScavengerCity.Entities.QuestionInstanceEntity", b =>
                {
                    b.Property<int>("QuestionInstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("HuntInstanceID");

                    b.Property<bool>("IsHintUsed");

                    b.Property<int>("QuestionID");

                    b.Property<int>("SequenceNumber");

                    b.HasKey("QuestionInstanceID");

                    b.HasIndex("HuntInstanceID");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuestionInstances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScavengerCity.Entities.AnswerInstanceEntity", b =>
                {
                    b.HasOne("ScavengerCity.Entities.QuestionInstanceEntity")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionInstanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScavengerCity.Entities.HuntInstanceEntity", b =>
                {
                    b.HasOne("ScavengerCity.Entities.QuestionInstanceEntity", "CurrentQuestionInstance")
                        .WithMany()
                        .HasForeignKey("CurrentQuestionInstanceID");

                    b.HasOne("ScavengerCity.Entities.HuntEntity", "Hunt")
                        .WithMany()
                        .HasForeignKey("HuntID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScavengerCity.Entities.PurchaseEntity", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScavengerCity.Entities.QuestionEntity", b =>
                {
                    b.HasOne("ScavengerCity.Entities.AnswerEntity", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScavengerCity.Entities.HintEntity", "Hint")
                        .WithMany()
                        .HasForeignKey("HintID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScavengerCity.Entities.HuntEntity")
                        .WithMany("Questions")
                        .HasForeignKey("HuntID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScavengerCity.Entities.QuestionInstanceEntity", b =>
                {
                    b.HasOne("ScavengerCity.Entities.HuntInstanceEntity")
                        .WithMany("Questions")
                        .HasForeignKey("HuntInstanceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScavengerCity.Entities.QuestionEntity", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
